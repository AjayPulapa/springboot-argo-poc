name: CI/CD Pipeline - Build and Deploy Spring Boot to AKS

on:
  push:
    branches:
      - main  # Runs when changes are pushed to main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    permissions:
      contents: write  # ‚úÖ Grants write access for pushing changes

    steps:
      # ‚úÖ 1. Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # ‚úÖ 2. Debug - List All Files Before Processing
      - name: Debug - List All Files Before Processing
        run: ls -R

      # ‚úÖ 3. Verify if `deployment.yaml` exists
      - name: Debug - Check if deployment.yaml Exists
        run: |
          if [ -f "k8s-manifests/deployment.yaml" ]; then
            echo "‚úÖ deployment.yaml found."
          else
            echo "‚ùå deployment.yaml NOT found!"
            exit 1
          fi

      # ‚úÖ 4. Verify if `cronjobfive.yaml` exists
      - name: Debug - Check if cronjobfive.yaml Exists
        run: |
          if [ -f "k8s-manifests/cronjobfive.yaml" ]; then
            echo "‚úÖ cronjobfive.yaml found."
          else
            echo "‚ùå cronjobfive.yaml NOT found!"
            exit 1
          fi

      # ‚úÖ 5. Print deployment.yaml BEFORE modification
      - name: Debug - Print deployment.yaml Before Update
        run: cat k8s-manifests/deployment.yaml || echo "‚ùå deployment.yaml does not exist!"

      # ‚úÖ 6. Print cronjobfive.yaml BEFORE modification
      - name: Debug - Print cronjobfive.yaml Before Update
        run: cat k8s-manifests/cronjobfive.yaml || echo "‚ùå cronjobfive.yaml does not exist!"

      # ‚úÖ 7. Set up JDK 17 for Maven build
      - name: Set Up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # ‚úÖ 8. Build the Spring Boot application JAR
      - name: Build Spring Boot JAR
        run: mvn clean install -DskipTests

      # ‚úÖ 9. Log in to Azure
      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # ‚úÖ 10. Log in to Azure Container Registry (ACR)
      - name: Log in to ACR
        run: az acr login --name ${{ secrets.AZURE_CONTAINER_REGISTRY }}

      # ‚úÖ 11. Generate a unique image tag (Timestamp + Commit SHA)
      - name: Set IMAGE_TAG
        run: echo "IMAGE_TAG=$(shuf -zer -n6 {A..Z} {a..z} {0..9} | tr -d '\0')-$(echo ${{ github.sha }} | cut -c1-4)" >> $GITHUB_ENV

      # ‚úÖ 12. Build and Push Docker Image
      - name: Build and Push Docker Image
        run: |
          docker build -t ${{ secrets.AZURE_CONTAINER_REGISTRY }}.azurecr.io/springboot-argo:${{ env.IMAGE_TAG }} .
          docker push ${{ secrets.AZURE_CONTAINER_REGISTRY }}.azurecr.io/springboot-argo:${{ env.IMAGE_TAG }}

      # ‚úÖ 13. Update deployment.yaml with the new image tag
      - name: Update deployment.yaml with new image tag
        run: |
          echo "‚úÖ Checking if deployment.yaml exists..."
          if [ -f "k8s-manifests/deployment.yaml" ]; then
            echo "‚úÖ deployment.yaml found. Updating image tag..."
            
            # Apply sed to update the image tag (Ensures correct YAML syntax)
            sed -i "s|image: .*azurecr.io/springboot-argo:.*|image: ${{ secrets.AZURE_CONTAINER_REGISTRY }}.azurecr.io/springboot-argo:${{ env.IMAGE_TAG }}|g" k8s-manifests/deployment.yaml
            echo "‚úÖ Successfully updated deployment.yaml."
          else
            echo "‚ùå deployment.yaml NOT found. Exiting..."
            exit 1
          fi

      # ‚úÖ 14. Update cronjobfive.yaml with the new image tag
      - name: Update cronjobfive.yaml with new image tag
        run: |
          echo "‚úÖ Checking if cronjobfive.yaml exists..."
          if [ -f "k8s-manifests/cronjobfive.yaml" ]; then
            echo "‚úÖ cronjobfive.yaml found. Updating image tag..."
            
            # Apply sed to update the image tag (Ensures correct YAML syntax)
            sed -i "s|image: .*azurecr.io/springboot-argo:.*|image: ${{ secrets.AZURE_CONTAINER_REGISTRY }}.azurecr.io/springboot-argo:${{ env.IMAGE_TAG }}|g" k8s-manifests/cronjobfive.yaml
            echo "‚úÖ Successfully updated cronjobfive.yaml."
          else
            echo "‚ùå cronjobfive.yaml NOT found. Exiting..."
            exit 1
          fi

      # ‚úÖ 15. Commit and push the updated files (deployment.yaml, cronjobfive.yaml)
      - name: Commit and Push Changes
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
        run: |
          git config --global user.name "Ajay Pulapa"
          git config --global user.email "ajaypulapa@gmail.com"
          git remote set-url origin https://x-access-token:$GH_PAT@github.com/${{ github.repository }}.git
          git add k8s-manifests/deployment.yaml k8s-manifests/cronjobfive.yaml
          if git diff --cached --quiet; then
            echo "‚ö†Ô∏è No changes detected in deployment.yaml or cronjobfive.yaml. Skipping commit."
          else
            git commit -m "Updated deployment and cronjob image to ${{ env.IMAGE_TAG }}"
            git push origin main
          fi

      # ‚úÖ 16. Set up Kubernetes CLI (kubectl)
      - name: Set up kubectl
        run: |
          az aks install-cli
          az aks get-credentials --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --name ${{ secrets.AZURE_AKS_CLUSTER }} --overwrite-existing

      # ‚úÖ 17. Apply Kubernetes manifests (Only if changes are made)
      - name: Apply Kubernetes Manifests
        run: |
          echo "üöÄ Checking for latest Kubernetes manifests..."
          
          REPO_DIR="/home/runner/work/${{ github.repository }}/${{ github.repository }}"

          if [ -d "$REPO_DIR" ]; then
            echo "‚úÖ Repository already exists. Pulling latest changes..."
            cd "$REPO_DIR"
            git fetch origin main
            git reset --hard origin/main
          else
            echo "üöÄ Repository not found. Cloning..."
            git clone https://x-access-token:${{ secrets.GH_PAT }}@github.com/${{ github.repository }}.git "$REPO_DIR"
            cd "$REPO_DIR"
          fi

          # Check if any files in `k8s-manifests/` have changed
          if git diff --quiet HEAD~1 -- k8s-manifests/; then
            echo "‚ö†Ô∏è No changes detected in Kubernetes manifests. Skipping apply."
          else
            echo "‚úÖ Changes detected. Applying Kubernetes manifests..."
            kubectl get namespace springboot || kubectl create namespace springboot
            kubectl apply -f k8s-manifests/ -n springboot
            echo "üîπ IMAGE_TAG used for deployment: ${{ env.IMAGE_TAG }}"
          fi

      # ‚úÖ 18. Get Kubernetes service details (Optional)
      - name: Get Service Details
        run: |
          echo "üîç Checking service status in springboot namespace..."
          kubectl get svc -n springboot
