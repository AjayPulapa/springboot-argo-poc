name: CI/CD Pipeline - Build and Deploy Spring Boot to AKS

on:
  push:
    branches:
      - main  # Runs when changes are pushed to main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    permissions:
      contents: write  # ‚úÖ Grants write access for pushing changes

    steps:
      # ‚úÖ 1. Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # ‚úÖ 2. Set IMAGE_TAG (Shorter, 6 characters + commit SHA)
      - name: Generate Short Unique IMAGE_TAG
        run: echo "IMAGE_TAG=$(shuf -zer -n6 {A..Z} {a..z} {0..9} | tr -d '\0')-$(echo ${{ github.sha }} | cut -c1-4)" >> $GITHUB_ENV

      # ‚úÖ 3. Build and Push Docker Image
      - name: Build and Push Docker Image
        run: |
          echo "üöÄ Using IMAGE_TAG: ${{ env.IMAGE_TAG }}"
          docker build -t ${{ secrets.AZURE_CONTAINER_REGISTRY }}.azurecr.io/springboot-argo:${{ env.IMAGE_TAG }} .
          docker push ${{ secrets.AZURE_CONTAINER_REGISTRY }}.azurecr.io/springboot-argo:${{ env.IMAGE_TAG }}

      # ‚úÖ 4. Update Kubernetes deployment.yaml with the new image tag
      - name: Update deployment.yaml with new image tag
        run: |
          echo "‚úÖ Checking if deployment.yaml exists..."
          if [ -f "k8s-manifests/deployment.yaml" ]; then
            echo "‚úÖ deployment.yaml found. Updating image tag..."
            
            echo "üîç Before Update:"
            cat k8s-manifests/deployment.yaml
            
            # Apply sed to update the image tag (Ensures correct YAML syntax)
            sed -i "s|image: .*azurecr.io/springboot-argo:.*|image: ${{ secrets.AZURE_CONTAINER_REGISTRY }}.azurecr.io/springboot-argo:${{ env.IMAGE_TAG }}|g" k8s-manifests/deployment.yaml
            
            echo "üîç After Update:"
            cat k8s-manifests/deployment.yaml
            
            echo "‚úÖ Successfully updated deployment."
          else
            echo "‚ùå deployment.yaml NOT found. Exiting..."
            exit 1
          fi

      # ‚úÖ 5. Commit and Push Changes
      - name: Commit and Push Changes
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
        run: |
          git config --global user.name "Ajay Pulapa"
          git config --global user.email "ajaypulapa@gmail.com"
          git remote set-url origin https://x-access-token:$GH_PAT@github.com/${{ github.repository }}.git
          git add k8s-manifests/deployment.yaml
          if git diff --cached --quiet; then
            echo "‚ö†Ô∏è No changes detected in deployment.yaml. Skipping commit."
          else
            git commit -m "Updated deployment image to ${{ env.IMAGE_TAG }}"
            git push origin main
          fi

      # ‚úÖ 6. Set up Kubernetes CLI (kubectl)
      - name: Set up kubectl
        run: |
          az aks install-cli
          az aks get-credentials --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} --name ${{ secrets.AZURE_AKS_CLUSTER }} --overwrite-existing

      # ‚úÖ 7. Apply Kubernetes manifests to sync changes to ArgoCD
      - name: Apply Kubernetes Manifests
        run: |
          echo "üöÄ Applying manifests to AKS..."
          kubectl apply -f k8s-manifests/ -n springboot
          echo "‚úÖ Manifests applied successfully."

      # ‚úÖ 8. Get Kubernetes service details (Optional)
      - name: Get Service Details
        run: |
          echo "üîç Checking service status in springboot namespace..."
          kubectl get svc -n springboot

      # ‚úÖ 9. Trigger ArgoCD Sync
      - name: Trigger ArgoCD Sync
        run: |
          echo "üöÄ Triggering ArgoCD sync..."
          curl -X POST "https://argocd.example.com/api/v1/applications/springboot-app/sync" \
            -H "Authorization: Bearer ${{ secrets.ARGOCD_AUTH_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{}'
          echo "‚úÖ ArgoCD sync triggered successfully."
